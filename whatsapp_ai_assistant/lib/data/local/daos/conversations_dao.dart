import 'package:drift/drift.dart';
import 'package:whatsapp_ai_assistant/data/local/app_database.dart'; // Ensure correct path
import 'package:logger/logger.dart'; // Import logger

part 'conversations_dao.g.dart'; // Generated by drift_dev

final Logger _logger = Logger();

@DriftAccessor(for: [Conversations])
class ConversationsDao extends DatabaseAccessor<AppDatabase> with _$ConversationsDaoMixin {
  ConversationsDao(AppDatabase attachedDatabase) : super(attachedDatabase); // Use super parameter

  // CRUD operations
  Future<List<Conversation>> getAllConversations() {
    _logger.d('Fetching all conversations.');
    return select(conversations).get();
  }

  Future<Conversation?> getConversationById(String id) {
    _logger.d('Fetching conversation with ID: $id');
    return (select(conversations)..where((tbl) => tbl.id.equals(id))).getSingleOrNull();
  }

  Future<void> insertConversation(ConversationsCompanion entry) {
    _logger.d('Inserting conversation: ${entry.id.value}');
    return into(conversations).insert(entry);
  }

  Future<bool> updateConversation(ConversationsCompanion entry) {
    _logger.d('Updating conversation: ${entry.id.value}');
    return update(conversations).replace(entry);
  }

  Future<int> deleteConversation(String id) {
    _logger.d('Deleting conversation with ID: $id');
    return (delete(conversations)..where((tbl) => tbl.id.equals(id))).go();
  }

  // Example: stream of monitored conversations (for chat_monitor_providers)
  Stream<List<Conversation>> watchMonitoredConversations() {
    _logger.d('Watching monitored conversations.');
    return (select(conversations)..where((tbl) => tbl.isMonitored.equals(true))).watch();
  }
}